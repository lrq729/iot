<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
         http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://cxf.apache.org/jaxws 
   		http://cxf.apache.org/schemas/jaxws.xsd">
	<!-- 自动扫描controller包下的所有类，使其认为spring mvc的控制器 -->
	<!-- 加载controller的时候,不加载service,因为此时事物并未生效,若此时加载了service,那么事物无法对service进行拦截 -->
	<context:component-scan base-package="org.jeecgframework.web.*,com.jeecg.*">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
	</context:component-scan>
	<!--扫描放在mvc:annotation-driven之前，否则会出现maped uri，但是还是找不到情况-->
	<!--<context:component-scan base-package="org.jeecgframework.core.quartz.jobservice"/>-->
	<context:component-scan base-package="org.jeecgframework.core.quartz"/>
	<context:component-scan base-package="org.activiti.rest.editor" />
	<context:component-scan base-package="org.activiti.rest.diagram" />
	<!--扫描阿里云iot相关api组件-->
	<context:component-scan base-package="com.aliyun.iot"/>



	<!-- ApplicationContext -->
	<bean class="org.jeecgframework.core.util.ApplicationContextUtil"></bean>
	<bean class="org.jeecgframework.p3.core.utils.common.ApplicationContextUtil"></bean>

	<!--GetClassDir-->
	<bean id="getClassDir" class="org.jeecgframework.core.util.GetClassDir"></bean>
	<!--初始化阿里云物联网套件-->
	<bean id="initSDK" class="com.aliyun.iot.InitSDK"></bean>



	<!-- 避免IE执行ajax时，返回json出现下载文件 -->
	<!--<bean id="mappingJacksonHttpMessageConverter"-->
		  <!--class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">-->
		<!--<property name="supportedMediaTypes">-->
			<!--<list>-->
				<!--<value>application/json;charset=UTF-8</value>-->
				<!--<value>text/html;charset=UTF-8</value>-->

			<!--</list>-->
		<!--</property>-->
	<!--</bean>-->
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<!--<bean-->
			<!--class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">-->
		<!--<property name="messageConverters">-->
			<!--<list>-->
				<!--&lt;!&ndash; json转换器 &ndash;&gt;-->
				<!--<ref bean="mappingJacksonHttpMessageConverter" />-->
			<!--</list>-->
		<!--</property>-->
	<!--</bean>-->

	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射， 配置一个基于注解的定制的WebBindingInitializer，解决日期转换问题，方法级别的处理器映射 -->
	<!--start-->
	<!--<bean-->
			<!--class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">-->
		<!--<property name="cacheSeconds" value="0" />-->
		<!--<property name="messageConverters">-->
			<!--<list>-->
				<!--<ref bean="mappingJacksonHttpMessageConverter" />&lt;!&ndash; json转换器 &ndash;&gt;-->
			<!--</list>-->
		<!--</property>-->
		<!--<property name="webBindingInitializer">-->
			<!--<bean class="org.jeecgframework.core.interceptors.MyWebBinding" />-->
		<!--</property>-->
	<!--</bean>-->
	<!--end-->

	<!--springmvc3.1之后
		Spring Framework 3.1 introduces a new set of support classes for processing requests with annotated controllers:
		RequestMappingHandlerMapping
		RequestMappingHandlerAdapter
		ExceptionHandlerExceptionResolver
		These classes are a replacement for the existing:
		DefaultAnnotationHandlerMapping
		AnnotationMethodHandlerAdapter
		AnnotationMethodHandlerExceptionResolver
	-->
	<!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"></bean>-->
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射， 配置一个基于注解的定制的WebBindingInitializer，解决日期转换问题，方法级别的处理器映射 -->
	<!--<bean-->
		<!--class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">-->
		<!--<property name="cacheSeconds" value="0" />-->
		<!--<property name="messageConverters">-->
			<!--<list>-->
				<!--&lt;!&ndash; json转换器 &ndash;&gt;-->
				<!--<ref bean="mappingJacksonHttpMessageConverter" />-->
			<!--</list>-->
		<!--</property>-->
		<!--<property name="webBindingInitializer">-->
			<!--<bean class="org.jeecgframework.core.interceptors.MyWebBinding" />-->
		<!--</property>-->
	<!--</bean>-->


	<!--主要作用于@Controller激活该模式下面是一种简写形式
          它会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter，
          是spring MVC为@Controllers分发请求所必须的   -->
	<!--<mvc:annotation-driven />-->
	<!--<bean id="defaultJsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/>-->


	<!--为了兼容uploadify文件上传406错误与activiti流程设计器的打开空白start-->
	<mvc:annotation-driven>
		<mvc:message-converters>
			<ref bean="mappingJackson2HttpMessageConverter"/>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<bean id="mappingJackson2HttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<!--<value>application/json;charset=UTF-8</value>-->
				<value>text/html;charset=UTF-8</value>
				<value>text/*;charset=UTF-8</value>
			</list>
		</property>

	</bean>

	<bean id="defaultJsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/>
	<!--为了兼容uploadify文件上传406错误与activiti流程设计器的打开空白end-->

	<!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
	<bean id="defaultViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:order="3">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<!--<property name="contentType" value="text/html" />-->
		<property name="contentType" value="text/html;charset=UTF-8"/>
		<property name="prefix" value="/webpage/" />
		<property name="suffix" value=".jsp" />

	</bean>
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:defaultEncoding="UTF-8">
		<property name="maxUploadSize">
			<value>104857600</value>
		</property>
		<property name="maxInMemorySize">
			<value>4096</value>
		</property>
	</bean>

    <!-- Bean解析器,级别高于默认解析器,寻找bean对象进行二次处理 -->
    <bean id="beanNameViewResolver"
          class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="0">
    </bean>



    <!-- Excel 处理 根据用户输入进行对象处理 -->
    <bean id="jeecgExcelView" class="org.jeecgframework.poi.excel.view.JeecgSingleExcelView" />
    <bean id="jeecgTemplateExcelView" class="org.jeecgframework.poi.excel.view.JeecgTemplateExcelView" />
    <bean id="jeecgTemplateWordView" class="org.jeecgframework.poi.excel.view.JeecgTemplateWordView" />
    <bean id="jeecgMapExcelView" class="org.jeecgframework.poi.excel.view.JeecgMapExcelView" />
	<!-- 方言 -->
	<bean id="dialect"
		class="org.jeecgframework.core.common.hibernate.dialect.DialectFactoryBean">
		<property name="dbType" value="${jdbc.dbType}" />
	</bean>
	<!-- 异常处理类 -->
	<bean id="exceptionHandler"
		class="org.jeecgframework.core.common.exception.GlobalExceptionResolver" />
	<!-- 拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="org.jeecgframework.core.interceptors.EncodingInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="org.jeecgframework.core.interceptors.AuthInterceptor">
				<property name="excludeUrls">
					<list>
						<value>loginController.do?goPwdInit</value>
						<value>loginController.do?pwdInit</value>
						<value>loginController.do?login</value>
						<value>loginController.do?changeDefaultOrg</value>
                        <value>loginController.do?login2</value>
						<value>loginController.do?login3</value>
						<value>loginController.do?checkuser</value>
						<value>loginController.do?checkuser=</value>
						<value>repairController.do?repair</value>
						<value>systemController.do?saveFiles</value>
						<!--流程图部署上传路径-->
						<value>activitiController.do?deploy</value>
						<value>repairController.do?deleteAndRepair</value>
						<value>userController.do?userOrgSelect</value>
						<!--移动图表-->
						<value>cgDynamGraphController.do?design</value>
						<value>cgDynamGraphController.do?datagrid</value>
						
						<!--online表单对外接口-->
						<value>cgFormDataController.do?getFormInfo</value>
						<value>cgFormDataController.do?deleteFormInfo</value>
						<value>cgFormDataController.do?addFormInfo</value>
						<value>cgFormDataController.do?updateFormInfo</value>
						
						<!-- 菜单样式图标预览 -->
						<value>webpage/common/functionIconStyleList.jsp</value>
					</list>
				</property>
			</bean>
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- 智能表单配置引入 -->
	<import resource="classpath*:org/jeecgframework/web/cgform/common/spring-mvc-cgform.xml" />
	<!--集成cxf webservice接口-->
	<import resource="classpath:cxf-servlet.xml" />
	<!-- jeecg plugin dev -->
	<import resource="classpath:config/spring-config-p3.xml" />
</beans>